/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trabajofinal;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import javax.swing.JOptionPane;

/**
 *
 * @author jessi
 */
public class frmGraphs extends javax.swing.JFrame {

    public Graphics g;
    public Graph grafito;
    public JsonObject nodos;
    public JsonObject arcos;
    public BinarySearchTree arbolito;
    public String[] nodosArbol;

    /**
     * Creates new form frmGraphs
     */
    public frmGraphs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtJson = new javax.swing.JTextField();
        btnLeer = new javax.swing.JButton();
        panelGraph = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaShow = new javax.swing.JTextArea();
        btnListaArcos = new javax.swing.JButton();
        btnListaA = new javax.swing.JButton();
        btnMatriz = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        txtArbol = new javax.swing.JTextField();
        btnArbol = new javax.swing.JButton();
        btnEliminarNodo = new javax.swing.JButton();
        txtNodo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtJson.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        btnLeer.setText("Leer  y Generar");
        btnLeer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLeerActionPerformed(evt);
            }
        });

        panelGraph.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(153, 51, 255)));
        panelGraph.setForeground(new java.awt.Color(255, 255, 255));
        panelGraph.setPreferredSize(new java.awt.Dimension(640, 360));

        javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
        panelGraph.setLayout(panelGraphLayout);
        panelGraphLayout.setHorizontalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelGraphLayout.setVerticalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        txaShow.setEditable(false);
        txaShow.setColumns(20);
        txaShow.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txaShow.setRows(5);
        txaShow.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(51, 255, 0)));
        txaShow.setMargin(new java.awt.Insets(25, 25, 25, 25));
        txaShow.setSelectedTextColor(new java.awt.Color(153, 51, 255));
        jScrollPane1.setViewportView(txaShow);

        btnListaArcos.setText("Lista Arcos");
        btnListaArcos.setEnabled(false);
        btnListaArcos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListaArcosActionPerformed(evt);
            }
        });

        btnListaA.setText("Lista Adyacencia ");
        btnListaA.setEnabled(false);
        btnListaA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListaAActionPerformed(evt);
            }
        });

        btnMatriz.setText("Matriz Adyacencia ");
        btnMatriz.setEnabled(false);
        btnMatriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMatrizActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(153, 255, 255));
        jTextField1.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jTextField1.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(0, 153, 153)));
        jTextField1.setMargin(new java.awt.Insets(25, 0, 0, 0));
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Lector de archivo JSON");

        jLabel2.setText("Generador de árbol de búsqueda binario");

        btnArbol.setText("Generar");
        btnArbol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArbolActionPerformed(evt);
            }
        });

        btnEliminarNodo.setText("Eliminar nodo");
        btnEliminarNodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarNodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(283, 283, 283)
                        .addComponent(btnEliminarNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtJson)
                            .addComponent(panelGraph, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                            .addComponent(btnLeer, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtArbol, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)
                                .addComponent(txtNodo)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                                    .addComponent(jTextField1))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnListaArcos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnListaA, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnMatriz, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(panelGraph, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnMatriz)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnListaA)
                        .addGap(11, 11, 11)
                        .addComponent(btnListaArcos))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtJson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLeer)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArbol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNodo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnArbol)
                    .addComponent(btnEliminarNodo)
                    .addComponent(btnLimpiar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLeerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLeerActionPerformed
        //Se guarda el texto JSON
        String json = txtJson.getText();

        //Se crea una instancia de JsonParser para analizar el texto JSON
        JsonParser parser = new JsonParser();

        //Se lee y guarda el texto capturado en un objeto JSON
        JsonObject gsonObj = parser.parse(json).getAsJsonObject();

        //Se guarda por separado la información de los nodos y los arcos
        //como objetos JSON
        nodos = gsonObj.getAsJsonObject("vl");
        arcos = gsonObj.getAsJsonObject("el");

        //Se instancia el grafo con el número de nodos
        grafito = new Graph(nodos.size());

        g = panelGraph.getGraphics();
        drawEdges(g, arcos, nodos, grafito);
        drawNodes(g, nodos);
        
        Mostrar(true);

    }//GEN-LAST:event_btnLeerActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        panelGraph.repaint();
        txtJson.setText("");
        txaShow.setText("");
        txtArbol.setText("");
        txtNodo.setText("");
        Mostrar(false);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnListaArcosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListaArcosActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("Lista Arcos");
        txaShow.setText(showEdges(grafito, nodos.size(), g));
    }//GEN-LAST:event_btnListaArcosActionPerformed

    private void btnListaAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListaAActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("Lista Adyacencia");
        txaShow.setText(showAList(grafito, nodos.size(), g));
    }//GEN-LAST:event_btnListaAActionPerformed

    private void btnMatrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMatrizActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("Matriz Adyacencia");
        txaShow.setText(showMatrix(grafito, nodos.size(), g));
    }//GEN-LAST:event_btnMatrizActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void btnArbolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArbolActionPerformed
            try {
            String valores = txtArbol.getText();
            nodosArbol = valores.split(",");
            if (nodosArbol.length > 9) {
                throw new Exception("Ingrese máximo 9 nodos");
            } else {
                arbolito = new BinarySearchTree();
                for (String nodo : nodosArbol) {
                    arbolito.add(Integer.parseInt(nodo));
                }
                g = panelGraph.getGraphics();
                drawTree(370, 30, arbolito, arbolito.getRoot());
                //System.out.println();
            }
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(null, "No deje espacios en blanco y separe los numeros con coma");
        } 
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnArbolActionPerformed

    private void btnEliminarNodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarNodoActionPerformed

        int nodo = Integer.valueOf(txtNodo.getText());
        if (arbolito.search(nodo) != null) {
            arbolito.Delete(nodo);
            repaint();
        } else {
            JOptionPane.showMessageDialog(null, "El nodo que quiere eliminar no existe");
        }

    }//GEN-LAST:event_btnEliminarNodoActionPerformed

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (arbolito != null) {
            drawTree(370, 30, arbolito, arbolito.getRoot());
        }
    }

    public int LevelNodo(int lvl){
        int a = 150;
        for(int i = 0; i<Integer.MAX_VALUE; i++){  
            if(i == lvl){
                return a;
            }
            a/=5;
        }
        return 0;
    }
    
    public void Mostrar(boolean mostrar){
        btnMatriz.setEnabled(mostrar);
        btnListaA.setEnabled(mostrar);
        btnListaArcos.setEnabled(mostrar);
    }
    
    
    public int ancho = 40;
    public int radio = 10;
    
    public void drawTree(int x, int y, BinarySearchTree arbolito, BinaryNode node) {
        if (node == null) {

        } else {
            System.out.println("nodo: " + node.getData());
            System.out.println("nivel: " + arbolito.showLevel(node.getData()));
            System.out.println("valor x: " + x);

            int xd = LevelNodo(arbolito.showLevel(node.getData()));
                    
            g.setColor(Color.cyan);
            g.fillOval(x, y, 30, 30);
            g.setColor(Color.black);
            g.drawString(String.valueOf(node.getData()), x + radio, y + radio);

            if (node.getLeft() != null) {
                g.drawLine(x + radio, y + radio, x - ancho + radio - xd, y + ancho + radio);
            }
            if (node.getRight() != null) {
                g.drawLine(x + radio, y + radio, x + ancho + radio + xd, y + ancho + radio);
            }

            drawTree(x - ancho - xd, y + ancho, arbolito, node.getLeft());
            drawTree(x + ancho + xd, y + ancho, arbolito, node.getRight());
        }
        panelGraph.paintComponents(g);
    }

    public void drawEdges(Graphics g, JsonObject arcos, JsonObject nodos, Graph grafito) {
        //se hace un recorrido para guardar y dibujar los arcos
        for (int i = 0; i < arcos.size(); i++) {
            //se obtiene el arco y sus valores
            JsonObject edge = arcos.getAsJsonObject(String.valueOf(i));
            int source = edge.get("u").getAsInt();
            int destination = edge.get("v").getAsInt();
            String weight = edge.get("w").getAsString();

            //se añade el arco
            grafito.addEdge(source, destination);

            //Para dibujar la linea, se obtiene la información del nodo de fuente
            //y la información del nodo de inicio
            JsonObject nodeS = nodos.getAsJsonObject(String.valueOf(source));
            JsonObject nodeD = nodos.getAsJsonObject(String.valueOf(destination));

            //Se obtienen los valores de X y Y de cada nodo
            int x1 = nodeS.get("x").getAsInt();
            int y1 = nodeS.get("y").getAsInt();
            int x2 = nodeD.get("x").getAsInt();
            int y2 = nodeD.get("y").getAsInt();

            //Se dibuja el arco que conecta a los nodos con su peso
            g.setColor(Color.red);
            drawArrow(g, x1, y1, x2, y2);

            //g.drawLine(x1, y1, x2, y2);
            g.setColor(Color.BLACK);
            g.drawString(weight, ((x1 + x2 - 5) / 2), ((y1 + y2 - 10)/ 2));
        }
    }

    public void drawNodes(Graphics g, JsonObject nodos) {
        //Se hace un recorrido para dibujar los nodos
        for (int i = 0; i < nodos.size(); i++) {
            //Se obtiene el nodo y los valores para su posición
            JsonObject node = nodos.getAsJsonObject(String.valueOf(i));
            int x = node.get("x").getAsInt();
            int y = node.get("y").getAsInt();

            //Se dibuja el nodo con su "nombre"
            g.setColor(Color.cyan);
            g.fillOval(x - 15, y - 15, 30, 30);
            g.setColor(Color.BLACK);
            g.drawString(String.valueOf(i), x-3, y+5);
        }
    }

    public void drawArrow(Graphics g1, int x1, int y1, int x2, int y2) {
        Graphics2D g = (Graphics2D) g1.create();

        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy) - 15;
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g.transform(at);

        // Draw horizontal arrow starting in (0, 0)
        g.drawLine(0, 0, len, 0);
        int ARR_SIZE = 4;
        g.fillPolygon(new int[]{len, len - ARR_SIZE, len - ARR_SIZE, len},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }

    public String showMatrix(Graph myGraph, int size, Graphics g) {
        String table = "        ";

        for (int i = 0; i < size; i++) {
            table += i + " ";
        }

        table += "\n";

        for (int i = 0; i < size; i++) {
            if (i < 10) {
                table += i + "   |  ";
            } else {
                table += i + " |  ";
            }

            for (int j = 0; j < size; j++) {
                //table += myGraph.getaMatrix()[i][j];
                if (myGraph.getaMatrix()[i][j]) {
                    table += 1;
                } else {
                    table += 0;
                }
                if (j < 9) {
                    table += " ";
                } else {
                    table += "   ";
                }
            }
            table += "| " + "\n";
        }

        return table;
    }

    public String showAList(Graph myGraph, int size, Graphics g) {
        String list = "";
        for (int i = 0; i < size; i++) {
            list += i + ": ";
            for (Integer v : myGraph.getaList()[i]) {
                list += v + " ";
            }
            list += "\n";
        }
        return list;
    }

    public String showEdges(Graph myGraph, int size, Graphics g) {
        String list = "";
        int edges = 0;
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                if (myGraph.getaMatrix()[i][j]) {
                    list += edges + ": " + i + " " + j + "\n";
                    edges++;
                }
            }
        }
        return list;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */      
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmGraphs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmGraphs().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArbol;
    private javax.swing.JButton btnEliminarNodo;
    private javax.swing.JButton btnLeer;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnListaA;
    private javax.swing.JButton btnListaArcos;
    private javax.swing.JButton btnMatriz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel panelGraph;
    private javax.swing.JTextArea txaShow;
    private javax.swing.JTextField txtArbol;
    private javax.swing.JTextField txtJson;
    private javax.swing.JTextField txtNodo;
    // End of variables declaration//GEN-END:variables
}
